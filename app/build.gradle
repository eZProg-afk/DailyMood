plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-kapt")
    id("kotlin-parcelize")
    id("dagger.hilt.android.plugin")
    id("androidx.navigation.safeargs")
    id("com.google.gms.google-services")
  //  id("com.google.firebase.crashlytics")
}

android {

    defaultConfig {
        applicationId "spiral.bit.dev.dailymood"
        minSdk rootProject.appMinSdkVersion
        compileSdk rootProject.appCompileSdkVersion
        targetSdk rootProject.appTargetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    viewBinding.enabled true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            assets {
                srcDirs 'src/main/assets'
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {

    // Adapter Delegates
    implementation("com.hannesdorfmann:adapterdelegates4-kotlin-dsl:${adapterDelegatesVersion}")
    implementation("com.hannesdorfmann:adapterdelegates4-kotlin-dsl-viewbinding:${adapterDelegatesVersion}")

    //TODO УБРАТЬ ИЛИ УЗНАТЬ ЧТО ЭТО
    implementation "androidx.startup:startup-runtime:1.1.0"

    // Voice emotion recognition
    implementation("com.github.alshell7:VokaturiAndroid:${vokaturiVersion}")

    // Photo emotion recognition
    implementation("com.google.mlkit:face-detection:${faceDetectionMlKitVersion}")
    implementation("com.google.android.gms:play-services-mlkit-face-detection:${playServicesFaceDetectionVersion}")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesCoreVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesAndroidVersion}")

    // Architecture (OrbitMVI)
    implementation("org.orbit-mvi:orbit-viewmodel:${orbitVersion}")
    implementation("org.orbit-mvi:orbit-core:${orbitVersion}")

    // Gson
    implementation("com.google.code.gson:gson:${gsonVersion}")

    // UI
    implementation("androidx.appcompat:appcompat:${appCompatVersion}")
    implementation("com.google.android.material:material:${materialVersion}")
    implementation("androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}")
    implementation("com.github.kizitonwose:CalendarView:${calendarVersion}")
    implementation("com.kirich1409.viewbindingpropertydelegate:viewbindingpropertydelegate:${viewBindingVersion}")
    implementation("com.github.unaisulhadi:emojiratingbar:${emojiRatingBarVersion}")
    implementation("androidx.camera:camera-camera2:$cameraxVersion")
    implementation("androidx.camera:camera-lifecycle:$cameraxVersion")
    implementation("androidx.camera:camera-view:${cameraViewVersion}")
    implementation("com.github.CanHub:Android-Image-Cropper:${cropperVersion}")
    implementation("com.airbnb.android:lottie:$lottieVersion")
    implementation("com.github.PhilJay:MPAndroidChart:${mpChartVersion}")
    implementation("com.makeramen:roundedimageview:${roundedImageView}")
    implementation("com.gauravk.audiovisualizer:audiovisualizer:${audioVisualiserVersion}")

    // Hilt
    implementation("com.google.dagger:hilt-android:${hiltVersion}")
    implementation("androidx.hilt:hilt-lifecycle-viewmodel:${hiltViewModelVersion}")
    implementation("androidx.hilt:hilt-navigation-fragment:${hiltFragmentNavigationVersion}")
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt("com.google.dagger:hilt-android-compiler:${hiltVersion}")
    kapt("androidx.hilt:hilt-compiler:${hiltCompilerVersion}")

    // Room
    implementation("androidx.room:room-runtime:${roomVersion}")
    implementation("androidx.room:room-ktx:${roomVersion}")
    kapt("androidx.room:room-compiler:${roomVersion}")

    // Navigation
    implementation("androidx.navigation:navigation-fragment-ktx:${navigationKtxVersion}")
    implementation("androidx.navigation:navigation-ui-ktx:${navigationVersion}")

    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:${lifecycleKtxVersion}")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycleKtxVersion}")

    // Ktx's
    implementation("androidx.activity:activity-ktx:${activityKtxVersion}")
    implementation("androidx.fragment:fragment-ktx:${fragmentKtxVersion}")
    implementation("androidx.core:core-ktx:${coreKtxVersion}")

    // Glide
    implementation("com.github.bumptech.glide:glide:${glideVersion}")
    kapt("com.github.bumptech.glide:compiler:${glideVersion}")

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:${firebaseBomVersion}")
    implementation("com.google.firebase:firebase-auth-ktx")
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-core")
    //implementation("com.google.firebase:firebase-crashlytics")

    // FaceBook
    implementation("com.facebook.android:facebook-login:${facebookVersion}")

    //Google Authenticate
    implementation("com.google.android.gms:play-services-auth:${googleAuthenticateVersion}")

    // Unit Tests
    testImplementation("junit:junit:$junitVersion")
    testImplementation("org.mockito:mockito-core:$mockitoCoreVersion")
    testImplementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testImplementation("androidx.arch.core:core-testing:$archCoreTesting")
    testImplementation("org.robolectric:robolectric:$robolectricVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTestVersion")
    testImplementation("com.google.truth:truth:$truthVersion")

    // Instrumented Unit Tests
    androidTestImplementation("junit:junit:$junitVersion")
//    androidTestImplementation("com.linkedin.dexmaker:dexmaker-mockito:$dexmakerMockitoVersion")
//    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesTestVersion")
//    androidTestImplementation("androidx.arch.core:core-testing:$archCoreTesting")
//    androidTestImplementation("com.google.truth:truth:$truthVersion")
    androidTestImplementation("androidx.test.ext:junit:$junitExtVersion")
//    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoCoreVersion")
//    androidTestImplementation("org.mockito:mockito-core:$mockitoCoreVersion")
//    androidTestImplementation("com.google.dagger:hilt-android-testing:$hiltTestingVersion")
   // androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoCoreVersion")
    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:5.4.2")

    kaptAndroidTest("com.google.dagger:hilt-android-compiler:$hiltCompilerTestVersion")
    debugImplementation("androidx.fragment:fragment-testing:$fragmentTestingVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.4.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.4.2")

}

